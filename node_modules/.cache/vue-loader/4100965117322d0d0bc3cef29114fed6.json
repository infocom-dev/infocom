{"remainingRequest":"/app/node_modules/vue-loader/lib/index.js??vue-loader-options!/app/src/components/v-slider.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/app/src/components/v-slider.vue","mtime":1610367917419},{"path":"/app/node_modules/css-loader/dist/cjs.js","mtime":1610126726916},{"path":"/app/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1610126728456},{"path":"/app/node_modules/postcss-loader/src/index.js","mtime":1610126727680},{"path":"/app/node_modules/sass-loader/dist/cjs.js","mtime":1610126728140},{"path":"/app/node_modules/cache-loader/dist/cjs.js","mtime":1610126726712},{"path":"/app/node_modules/vue-loader/lib/index.js","mtime":1610126728456}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCkBpbXBvcnQgIi4uLy4uL3B1YmxpYy92dWUtY3VzdG9tLXJhbmdlLXNsaWRlci5zY3NzIjsK"},{"version":3,"sources":["v-slider.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4KA","file":"v-slider.vue","sourceRoot":"src/components","sourcesContent":["<template >\n<div id=\"v-custom-slider\">\n  <div class=\"slider\">\n    <div class=\"slider__wrapper\">\n      <div v-if=\"!hideLabel\" :style=\"{ left: position }\" class=\"slider__label\">{{ sliderLabel }}</div>\n      <div class=\"slider__track\" :class=\"{'slider__track--rectangular': !raising}\">\n        <div\n          v-if=\"raising\"\n          :style=\"{ 'border-left-width': sliderWidth + 'px' }\"\n          class=\"slider__track-top\"\n        />\n        <div\n          v-if=\"raising\"\n          :style=\"{ 'border-right-width': sliderWidth + 'px' }\"\n          class=\"slider__track-bottom\"\n        />\n      </div>\n      <input\n        ref=\"slider\"\n        v-model=\"sliderValue\"\n        :max=\"sliderMax\"\n        class=\"slider__input\"\n        type=\"range\"\n        :min=\"sliderMin\"\n        :step=\"step\"\n        @input=\"update\"\n        @change=\"change\"\n      />\n    </div>\n  </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'v-custom-slider',\n  props: {\n    value: {\n      type: String,\n      required: false,\n      default: \"\"\n    },\n    values: {\n      type: Array,\n      required: false,\n      default: () => []\n    },\n    min: {\n      type: String,\n      required: false,\n      default: \"0\"\n    },\n    max: {\n      type: String,\n      required: false,\n      default: \"100\"\n    },\n    step: {\n      type: String,\n      required: false,\n      default: \"1\"\n    },\n    hideLabel: {\n      type: Boolean,\n      required: false,\n      default: false\n    },\n    raising: {\n      type: Boolean,\n      required: false,\n      default: false\n    }\n  },\n  data() {\n    return {\n      sliderWidth: 0,\n      sliderValues: [],\n      sliderValue: null,\n      sliderMax: null,\n      sliderMin: null\n    };\n  },\n  computed: {\n    sliderLabel() {\n      // If using custom values, the custom label is returned, otherwise the value is also the label\n      return this.sliderValues.length\n        ? this.sliderValues[this.sliderValue - 1].label\n        : this.sliderValue;\n    },\n    sliderOutputValue() {\n      // If using custom values, the custom value is returned, otherwise just the default value\n      return this.sliderValues.length\n        ? this.sliderValues[this.sliderValue - 1].value\n        : this.sliderValue;\n    },\n    position() {\n      const val = this.sliderValue;\n      // Measure width of slider element. Adjust by 20 to account for thumbsize\n      const width = this.sliderWidth - 20;\n      // Calculate percentage between left and right of input\n      const percent =\n        (val - this.sliderMin) / (this.sliderMax - this.sliderMin);\n      // Janky value to get pointer to line up better\n      const offset = -2;\n      const position = width * percent + offset;\n      return `${position}px`;\n    }\n  },\n  mounted() {\n    this.changeValues();\n    this.$nextTick(() => {\n      this.resizeHandler();\n    });\n  },\n  methods: {\n    changeValues() {\n      // Set local values, depending on use of custom or default\n      if (this.values.length) {\n        this.sliderValues = this.values;\n        this.sliderMin = \"1\";\n        this.sliderMax = this.sliderValues.length;\n        // Find the corresponding custom value, and set the local sliderValue\n        let index = 0;\n        this.values.map((item, i) => {\n          if (item.value === this.value) {\n            index = i;\n          }\n          return true;\n        });\n        this.sliderValue = index + 1;\n      } else {\n        // In case of using default slider methods\n        this.sliderMin = this.min;\n        this.sliderMax = this.max;\n        this.sliderValue = this.value;\n      }\n      this.update();\n    },\n    update() {\n      this.$emit(\"input\", this.sliderOutputValue);\n    },\n    change() {\n      this.$emit(\"change\", this.sliderOutputValue);\n    },\n    resizeHandler() {\n      this.sliderWidth = this.$refs.slider.clientWidth;\n    }\n  },\n  created() {\n    window.addEventListener(\"resize\", this.resizeHandler);\n  },\n  destroyed() {\n    window.removeEventListener(\"resize\", this.resizeHandler);\n  },\n  watch: {\n    values: {\n      immediate: true, \n      handler () {\n        this.changeValues();\n      }\n    },\n    value: {\n      immediate: true, \n      handler () {\n        this.changeValues();\n      }\n    }\n  },\n};\n</script>\n\n<style lang=\"scss\">\n@import \"../../public/vue-custom-range-slider.scss\";\n</style>"]}]}
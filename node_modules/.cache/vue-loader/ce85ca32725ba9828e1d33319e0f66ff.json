{"remainingRequest":"/app/node_modules/vue-loader/lib/index.js??vue-loader-options!/app/src/components/RangeSliderComponent.vue?vue&type=style&index=0&id=6d5c7a62&scoped=true&lang=sass&","dependencies":[{"path":"/app/src/components/RangeSliderComponent.vue","mtime":1610448417293},{"path":"/app/node_modules/css-loader/dist/cjs.js","mtime":1610126726916},{"path":"/app/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1610126728456},{"path":"/app/node_modules/postcss-loader/src/index.js","mtime":1610126727680},{"path":"/app/node_modules/sass-loader/dist/cjs.js","mtime":1610126728140},{"path":"/app/node_modules/cache-loader/dist/cjs.js","mtime":1610126726712},{"path":"/app/node_modules/vue-loader/lib/index.js","mtime":1610126728456}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouc2ltcGxlLXJhbmdlLXNsaWRlcgogICAgLnNpbXBsZS1yYW5nZS1zbGlkZXItYmctYmFyCiAgICAgICAgZGlyZWN0aW9uOiBsdHIKICAgICAgICBiYWNrZ3JvdW5kOiAjYmViZWJlCiAgICAgICAgbWluLXdpZHRoOiA1MHB4CiAgICAgICAgaGVpZ2h0OiA0cHgKICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmUKICAgICAgICBtYXJnaW46IDQwcHggMTBweCAyMHB4IDEwcHgKICAgICAgICBib3JkZXItcmFkaXVzOiAxLjVweAogICAgICAgIC5zaW1wbGUtcmFuZ2Utc2xpZGVyLWJhcgogICAgICAgICAgICBoZWlnaHQ6IDEwMCUKICAgICAgICAgICAgYmFja2dyb3VuZDogIzY2OTlmZgogICAgICAgIC5zaW1wbGUtcmFuZ2Utc2xpZGVyLWFuY2hvcgogICAgICAgICAgICB3aWR0aDogMTVweAogICAgICAgICAgICBoZWlnaHQ6IDE1cHgKICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlCiAgICAgICAgICAgIHRvcDogLTYuNXB4CiAgICAgICAgICAgIGJhY2tncm91bmQ6ICNmZWZlZmUKICAgICAgICAgICAgYm94LXNoYWRvdzogMCAwIDRweCAzcHggcmdiYSgwLCAwLCAwLCAuMikKICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogOHB4CiAgICAgICAgICAgIC5zaW1wbGUtcmFuZ2Utc2xpZGVyLWhhbmRsZQogICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDAlCiAgICAgICAgICAgICAgICB3aWR0aDogMTAwJQogICAgICAgICAgICAgICAgb3BhY2l0eTogLjUKICAgICAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcgogICAgICAgICAgICAgICAgdXNlci1zZWxlY3Q6IG5vbmUKICAgICAgICAgICAgLnNpbXBsZS1yYW5nZS1zbGlkZXItaGFuZGxlOmZvY3VzCiAgICAgICAgICAgICAgICBvdXRsaW5lOiBub25lCiAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiA4cHgKICAgICAgICAgICAgICAgIGJveC1zaGFkb3c6IDAgMCAzcHggM3B4IHJnYigxMTEsIDEzMiwgMTkwKQogICAgICAgICAgICAuc2ltcGxlLXJhbmdlLXNsaWRlci1wb3BvdmVyLWxlZnQKICAgICAgICAgICAgICAgIGxlZnQ6IC0zcHgKICAgICAgICAgICAgICAgIHJpZ2h0OiB1bnNldCAhaW1wb3J0YW50CiAgICAgICAgICAgIC5zaW1wbGUtcmFuZ2Utc2xpZGVyLXBvcG92ZXItYXJyb3cKICAgICAgICAgICAgICAgIGNvbG9yOiB3aGl0ZQogICAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlCiAgICAgICAgICAgICAgICB0b3A6IC01cHgKICAgICAgICAgICAgICAgIGxlZnQ6IDFweAogICAgICAgICAgICAgICAgd2lkdGg6IDAKICAgICAgICAgICAgICAgIGhlaWdodDogMAogICAgICAgICAgICAgICAgYm9yZGVyLWxlZnQ6IDVweCBzb2xpZCB0cmFuc3BhcmVudAogICAgICAgICAgICAgICAgYm9yZGVyLXJpZ2h0OiA1cHggc29saWQgdHJhbnNwYXJlbnQKICAgICAgICAgICAgICAgIGJvcmRlci10b3A6IDVweCBzb2xpZCBjdXJyZW50Q29sb3IKICAgICAgICAgICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IDUwJSA1MCUKICAgIC5zaW1wbGUtcmFuZ2Utc2xpZGVyLXBvcG92ZXIKICAgICAgICByaWdodDogMAogICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZQogICAgICAgIGJvdHRvbTogMjBweAogICAgICAgIGJhY2tncm91bmQ6IHdoaXRlCiAgICAgICAgcGFkZGluZzogM3B4CiAgICAgICAgYm9yZGVyLXJhZGl1czogNXB4CiAgICAgICAgYm94LXNoYWRvdzogMXB4IDFweCA0cHggM3B4IHJnYmEoMCwgMCwgMCwgLjIpCiAgICAgICAgaW5wdXQKICAgICAgICAgICAgYm9yZGVyOiBub25lCiAgICAgICAgICAgIG91dGxpbmU6IG5vbmUKICAgICAgICAgICAgdmVydGljYWwtYWxpZ246IHRvcAogICAgICAgICAgICBkaXJlY3Rpb246IGx0cgogICAgICAgICAgICBwYWRkaW5nOiAwCiAgICAuc2ltcGxlLXJhbmdlLXNsaWRlci1tZXJnZWQtcG9wb3ZlcgogICAgICAgIGJvdHRvbTogMTVweAo="},{"version":3,"sources":["RangeSliderComponent.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAicA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"RangeSliderComponent.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div class=\"simple-range-slider\">\n        <div class=\"simple-range-slider-bg-bar\" :style=\"{background: barColor}\">\n            <div class=\"simple-range-slider-bar\"\n                 v-if=\"isRange\"\n                 :style=\"barStyle\"\n            />\n            <div\n                    v-if=\"popoverMerged\"\n                    style=\"right: unset\"\n                    class=\"simple-range-slider-popover simple-range-slider-merged-popover\"\n                    :style=\"mergedPopoverStyle\">\n                <label>\n                    <input\n                            type=\"text\"\n                            ref=\"input1\"\n                            v-digits-only\n                            v-model.number=\"anchor1Value\"\n                            v-autowidth=\"{maxWidth: '960px', minWidth: '12px', comfortZone: 0}\"\n                    />\n                </label>\n\n                <label>\n                    <input\n                            type=\"text\"\n                            ref=\"input_\"\n                            disabled\n                            value=\"-\"\n                            v-autowidth=\"{maxWidth: '960px', minWidth: '0', comfortZone: 0}\"\n                    />\n                </label>\n                <label>\n                    <input\n                            type=\"text\"\n                            ref=\"input2\"\n                            v-digits-only\n                            v-model.number=\"anchor2Value\"\n                            v-autowidth=\"{maxWidth: '960px', minWidth: '12px', comfortZone: 0}\"\n                    />\n                </label>\n            </div>\n\n\n            <div\n                    class=\"simple-range-slider-anchor\"\n                    :style=\"anchor1Style\"\n            >\n                <div\n                        tabindex=\"1\"\n                        @mousedown=\"mouseDown(1, $event)\"\n                        @keydown=\"keyDown(1,$event)\"\n                        class=\"simple-range-slider-handle\"/>\n                <div\n                        v-if=\"!popoverMerged\"\n                        :style=\"{right: isRtl?'0 !important':'',left: isRtl?'unset':''}\"\n                        class=\"simple-range-slider-popover simple-range-slider-popover-left\"\n                >\n                    <label>\n                        <input\n                                type=\"text\"\n                                ref=\"input1\"\n                                v-digits-only\n                                v-model.number=\"anchor1Value\"\n                                v-autowidth=\"{maxWidth: '960px', minWidth: '12px', comfortZone: 0}\"\n                        />\n                    </label>\n                </div>\n                <div class=\"simple-range-slider-popover-arrow\"/>\n            </div>\n\n            <div\n                    v-if=\"isRange\"\n                    class=\"simple-range-slider-anchor\"\n                    :style=\"anchor2Style\"\n            >\n                <div\n                        tabindex=\"1\"\n                        @mousedown=\"mouseDown(2, $event)\"\n                        @keydown=\"keyDown(2,$event)\"\n                        class=\"simple-range-slider-handle\"/>\n                <div\n                        v-if=\"!popoverMerged\"\n                        :style=\"{left: isRtl?'-3px !important':'',right: isRtl?'unset !important':''}\"\n                        class=\"simple-range-slider-popover\">\n                    <label>\n                        <input\n                                type=\"text\"\n                                ref=\"input2\"\n                                v-digits-only\n                                v-model.number=\"anchor2Value\"\n                                v-autowidth=\"{maxWidth: '960px', minWidth: '12px', comfortZone: 0}\"\n                        />\n                    </label>\n                </div>\n\n                <div class=\"simple-range-slider-popover-arrow\"/>\n\n            </div>\n\n\n        </div>\n    </div>\n\n</template>\n\n<script lang=\"ts\">\n    import {Component, Prop, Vue, Watch} from 'vue-property-decorator';\n    @Component\n    export default class VueSimpleRangeSlider extends Vue {\n        @Prop() private msg!: string;\n        @Prop({default: 0}) min!: number;\n        @Prop({default: 100}) max!: number;\n        @Prop({default: false, type: Boolean}) logarithmic!: boolean;\n        @Prop({required: true}) value!: [number, number] | number;\n        @Prop() activeBarColor?: string;\n        @Prop() barColor?: string;\n        // Slider value and component internal value are inconsistent\n        private get isNotSync() {\n            const isNotSnc = Array.isArray(this.value)\n                ? (!this.tempValue || !Array.isArray(this.tempValue)) ||\n                //@ts-ignore\n                this.value.some((val, index) => val !== this.tempValue[index])\n                : this.value !== this.tempValue;\n            return isNotSnc;\n        }\n        get syncValue() {\n            if (Array.isArray(this.value) && this.isNotSync) {\n                const value = this.value as [number, number];\n                this.value1ToPosition(value[0]);\n                this.value2ToPosition(value[1]);\n            } else if (this.isNotSync) {\n                const value = this.value as [number, number];\n                this.value1ToPosition(this.value as number);\n            }\n            return this.value;\n        }\n        tempValue!: number | [number, number];\n        // eslint-disable-next-line @typescript-eslint/adjacent-overload-signatures\n        set syncValue($value) {\n            this.tempValue = $value;\n            this.$emit('input', $value);\n        }\n        isRtl = false;\n        @Watch('popoverMerged')\n        popoverMergedStateChange() {\n            if (this.$refs.input1 instanceof HTMLInputElement && document.activeElement === this.$refs.input1) {\n                const position = this.$refs.input1.selectionStart as number;\n                this.$nextTick().then(() => {\n                    if (this.$refs.input1 instanceof HTMLInputElement) {\n                        this.$refs.input1.focus();\n                        this.$refs.input1.setSelectionRange(position, position);\n                    }\n                });\n            }\n            if (this.$refs.input2 instanceof HTMLInputElement && document.activeElement === this.$refs.input2) {\n                const position = this.$refs.input2.selectionStart as number;\n                this.$nextTick().then(() => {\n                    if (this.$refs.input2 instanceof HTMLInputElement) {\n                        this.$refs.input2.focus();\n                        this.$refs.input2.setSelectionRange(position, position);\n                    }\n                });\n            }\n        }\n        get popoverMerged() {\n            return this.anchor2Position - this.anchor1Position < (this.input1Width + this.input2Width) + 4\n                && this.isRange;\n        }\n        get isRange() {\n            return Array.isArray(this.value)\n        }\n        get anchor1Style() {\n            return {\n                transform: 'translateX(' + (this.isRtl ? (this.width - this.anchor1Position - 7.5) : (this.anchor1Position - 7.5)) + 'px)'\n            }\n        }\n        get barStyle() {\n            return {\n                transform: 'translateX(' + (this.isRtl ? (this.width - this.anchor2Position) : (this.anchor1Position)) + 'px)',\n                width: (this.anchor2Position - this.anchor1Position) + 'px',\n                background: this.activeBarColor\n            }\n        }\n        get anchor2Style() {\n            return {\n                transform: 'translateX(' + (this.isRtl ? (this.width - this.anchor2Position - 7.5) : (this.anchor2Position - 7.5)) + 'px)'\n            }\n        }\n        get mergedPopoverStyle() {\n            let translateX = (\n                    (this.isRtl ? (this.width - this.anchor2Position - 7.5) : (this.anchor2Position - 7.5)) +\n                    (this.isRtl ? (this.width - this.anchor1Position - 7.5) : (this.anchor1Position - 7.5))\n                ) / 2\n                - (this.input1Width + this.input2Width + this.dashInput) / 2 + 3;\n            translateX = Math.max(translateX, -10);\n            translateX = Math.min(translateX, this.width - (this.input1Width + this.input2Width + this.dashInput) + 10);\n            return {\n                transform: 'translateX(' + translateX + 'px)',\n                width: (this.anchor2Position - this.anchor1Position + 7.5) + 'px',\n                direction: this.isRtl ? 'rtl' : 'ltr',\n                minWidth: ((this.input1Width + this.input2Width + this.dashInput)) + 6 + 'px'\n            }\n        }\n        get anchor1Value(): number {\n            this.$nextTick().then(() => {\n                if (this.$refs.input1 instanceof HTMLElement) {\n                    this.input1Width = Math.max(12, Number.parseInt(this.$refs.input1.style.width.replace('px', '')));\n                }\n            });\n            if (Array.isArray(this.syncValue))\n                return this.syncValue[0];\n            return this.syncValue;\n        }\n        set anchor1Value($value) {\n            $value = Math.max(this.minAnchorValue, Math.min(this.maxAnchorValue, $value));\n            if (this.isRange) {\n                $value = Math.min(this.anchor2Value, $value);\n            }\n            if (this.isRange) {\n                const value = [...this.syncValue as [number, number]] as [number, number];\n                value[0] = $value;\n                this.syncValue = value;\n            } else {\n                this.syncValue = $value;\n            }\n            this.value1ToPosition($value);\n        }\n        value1ToPosition($value: number) {\n            if (this.logarithmic) {\n                this.anchor1PositionV = this.unLog($value);\n            } else {\n                this.anchor1PositionV = Math.round($value * this.scale);\n            }\n        }\n        get anchor2Value(): number {\n            this.$nextTick().then(() => {\n                if (this.$refs.input2 instanceof HTMLElement) {\n                    this.input2Width = Math.max(12, Number.parseInt(this.$refs.input2.style.width.replace('px', '')));\n                }\n            });\n            if (Array.isArray(this.syncValue))\n                return this.syncValue[1];\n            return this.syncValue;\n        }\n        set anchor2Value($value) {\n            $value = Math.max(this.minAnchorValue, Math.min(this.maxAnchorValue, $value));\n            if (this.isRange) {\n                $value = Math.max(this.anchor1Value, $value);\n            }\n            if (this.isRange) {\n                const value = [...this.syncValue as [number, number]] as [number, number];\n                value[1] = $value;\n                this.syncValue = value\n            } else {\n                this.syncValue = $value\n            }\n            this.value2ToPosition($value);\n        }\n        value2ToPosition($value: number) {\n            if (this.isRange) {\n                if (this.logarithmic) {\n                    this.anchor2PositionV = this.unLog($value);\n                } else {\n                    this.anchor2PositionV = Math.round($value * this.scale);\n                }\n            }\n        }\n        anchor1PositionV = 0;\n        get anchor1Position() {\n            return this.anchor1PositionV;\n        }\n        input1Width = 0;\n        input2Width = 0;\n        dashInput = 0;\n        // eslint-disable-next-line @typescript-eslint/adjacent-overload-signatures\n        set anchor1Position($position) {\n            if (Array.isArray(this.syncValue)) {\n                $position = Math.min(this.anchor2Position, $position);\n            }\n            if (this.logarithmic) {\n                this.anchor1Value = this.log($position);\n            } else {\n                this.anchor1Value = Math.round($position / this.scale);\n            }\n            this.anchor1PositionV = Math.max(0, Math.min(this.width, $position));\n        }\n        anchor2PositionV = 0;\n        get anchor2Position() {\n            return this.anchor2PositionV;\n        }\n        set anchor2Position($position) {\n            if (Array.isArray(this.syncValue)) {\n                $position = Math.max(this.anchor1Position, $position);\n            }\n            if (this.logarithmic) {\n                this.anchor2Value = this.log($position);\n            } else {\n                this.anchor2Value = Math.round($position / this.scale);\n            }\n            this.anchor2PositionV = Math.max(0, Math.min(this.width, $position));\n        }\n        width = 50;\n        get minAnchorValue() {\n            return this.min;\n        }\n        get maxAnchorValue() {\n            return this.max;\n        }\n        get scale(): number {\n            return (this.width - 7.5) / (this.maxAnchorValue - this.minAnchorValue);\n        }\n        draggingAnchor = 0;\n        dragStartX = 0;\n        dragStartPosition = 0;\n        mouseDown($anchor: number, $event: MouseEvent) {\n            this.draggingAnchor = $anchor;\n            this.dragStartX = $event.x;\n            if ($anchor == 1) {\n                this.dragStartPosition = this.anchor1Position;\n            } else {\n                this.dragStartPosition = this.anchor2Position;\n            }\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const win: any = window;\n            win.$SRSMouseMove = ($event: MouseEvent) => {\n                if ($anchor == 1) {\n                    if (this.isRtl) {\n                        this.anchor1Position = this.dragStartPosition + this.dragStartX - $event.x;\n                    } else {\n                        this.anchor1Position = this.dragStartPosition - this.dragStartX + $event.x;\n                    }\n                } else {\n                    if (this.isRtl) {\n                        this.anchor2Position = this.dragStartPosition + this.dragStartX - $event.x;\n                    } else {\n                        this.anchor2Position = this.dragStartPosition - this.dragStartX + $event.x;\n                    }\n                }\n                this.$forceUpdate();\n            };\n            win.$SRSMouseUp = () => {\n                document.removeEventListener('mouseup', win.$SRSMouseUp);\n                document.removeEventListener('mousemove', win.$SRSMouseMove);\n            };\n            document.addEventListener('mousemove', win.$SRSMouseMove);\n            document.addEventListener('mouseup', win.$SRSMouseUp);\n        }\n        changingByKey = false;\n        keyDown($anchor: number, $event: KeyboardEvent) {\n            if (this.changingByKey)\n                return;\n            this.changingByKey = true;\n            let speed = 40;\n            let count = 0;\n            const change = () => {\n                if (\n                    (!this.isRtl && ($event.code === \"ArrowDown\" || $event.code === \"ArrowLeft\"))\n                    ||\n                    (this.isRtl && ($event.code === \"ArrowUp\" || $event.code === \"ArrowRight\"))\n                ) {\n                    if ($anchor == 1) {\n                        this.anchor1Position--;\n                    }\n                    if ($anchor == 2) {\n                        this.anchor2Position--;\n                    }\n                } else if (\n                    (!this.isRtl && ($event.code === \"ArrowUp\" || $event.code === \"ArrowRight\"))\n                    ||\n                    (this.isRtl && ($event.code === \"ArrowDown\" || $event.code === \"ArrowLeft\"))\n                ) {\n                    if ($anchor == 1) {\n                        this.anchor1Position++;\n                    }\n                    if ($anchor == 2) {\n                        this.anchor2Position++;\n                    }\n                }\n            };\n            change();\n            const intervalKey = setInterval(() => {\n                count++;\n                if (count < speed) {\n                    return;\n                }\n                if (speed > 1)\n                    speed--;\n                change();\n            }, 5);\n            if ($event.target instanceof HTMLElement) {\n                $event.target.addEventListener('keyup', () => {\n                    this.changingByKey = false;\n                    clearInterval(intervalKey);\n                });\n            }\n        }\n        mounted() {\n            if (this.getStyle(this.$el as HTMLElement, 'direction') === 'rtl') {\n                this.isRtl = true;\n            }\n            this.width = this.$el.getBoundingClientRect().width - 20;\n            //this.valueChanged(this.value);\n            setTimeout(() => {\n                this.width = this.$el.getBoundingClientRect().width - 20;\n            });\n            if (this.$refs.input_ instanceof HTMLElement) {\n                this.dashInput = Number.parseInt(this.$refs.input_.style.width.replace(\"px\", \"\"));\n            }\n        }\n        getStyle(el: HTMLElement, styleProp: string) {\n            let y;\n            // @ts-ignore\n            if (el.currentStyle)\n                // @ts-ignore\n                y = el.currentStyle[styleProp];\n            // @ts-ignore\n            else if (window.getComputedStyle)\n                // @ts-ignore\n                y = document.defaultView.getComputedStyle(el, null)\n                    .getPropertyValue(styleProp);\n            return y;\n        }\n        log(pos: number) {\n            pos = Math.max(0, pos);\n            const valueRange = Math.log(this.maxAnchorValue - this.minAnchorValue);\n            const scale = valueRange / this.width;\n            let num = Math.floor(Math.exp(scale * pos));// Math.ceil((Math.pow(pos / this.width, base) + 1 ) * valueRange);\n            if (num - 1 !== 0) {\n                const r10 = Math.pow(10, Math.floor(Math.log10(num - 1 + this.minAnchorValue)));\n                num = Math.floor(num / r10) * r10;\n            } else {\n                num = num - 1 + this.minAnchorValue;\n            }\n            return num;\n        }\n        unLog(num: number) {\n            num++;\n            const valueRange = Math.log(this.maxAnchorValue - this.minAnchorValue);\n            const scale = valueRange / this.width;\n            if (this.isRtl) {\n                return Math.ceil((Math.log(num) / Math.log(Math.E)) / scale);\n            } else {\n                return Math.floor((Math.log(num) / Math.log(Math.E)) / scale);\n            }\n        }\n    }\n</script>\n\n<style scoped lang=\"sass\">\n    .simple-range-slider\n        .simple-range-slider-bg-bar\n            direction: ltr\n            background: #bebebe\n            min-width: 50px\n            height: 4px\n            position: relative\n            margin: 40px 10px 20px 10px\n            border-radius: 1.5px\n            .simple-range-slider-bar\n                height: 100%\n                background: #6699ff\n            .simple-range-slider-anchor\n                width: 15px\n                height: 15px\n                position: absolute\n                top: -6.5px\n                background: #fefefe\n                box-shadow: 0 0 4px 3px rgba(0, 0, 0, .2)\n                border-radius: 8px\n                .simple-range-slider-handle\n                    height: 100%\n                    width: 100%\n                    opacity: .5\n                    cursor: pointer\n                    user-select: none\n                .simple-range-slider-handle:focus\n                    outline: none\n                    border-radius: 8px\n                    box-shadow: 0 0 3px 3px rgb(111, 132, 190)\n                .simple-range-slider-popover-left\n                    left: -3px\n                    right: unset !important\n                .simple-range-slider-popover-arrow\n                    color: white\n                    position: absolute\n                    top: -5px\n                    left: 1px\n                    width: 0\n                    height: 0\n                    border-left: 5px solid transparent\n                    border-right: 5px solid transparent\n                    border-top: 5px solid currentColor\n                    transform-origin: 50% 50%\n        .simple-range-slider-popover\n            right: 0\n            position: absolute\n            bottom: 20px\n            background: white\n            padding: 3px\n            border-radius: 5px\n            box-shadow: 1px 1px 4px 3px rgba(0, 0, 0, .2)\n            input\n                border: none\n                outline: none\n                vertical-align: top\n                direction: ltr\n                padding: 0\n        .simple-range-slider-merged-popover\n            bottom: 15px\n</style>"]}]}
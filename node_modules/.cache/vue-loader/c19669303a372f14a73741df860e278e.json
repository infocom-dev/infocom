{"remainingRequest":"/app/node_modules/vue-loader/lib/index.js??vue-loader-options!/app/src/components/VueDoubleRange.vue?vue&type=style&index=0&id=1fdb31b6&scoped=true&lang=css&","dependencies":[{"path":"/app/src/components/VueDoubleRange.vue","mtime":1610372214876},{"path":"/app/node_modules/css-loader/dist/cjs.js","mtime":1610126726916},{"path":"/app/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1610126728456},{"path":"/app/node_modules/postcss-loader/src/index.js","mtime":1610126727680},{"path":"/app/node_modules/cache-loader/dist/cjs.js","mtime":1610126726712},{"path":"/app/node_modules/vue-loader/lib/index.js","mtime":1610126728456}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmNvbnRhaW5lciB7CiAgcG9zaXRpb246IHJlbGF0aXZlOwogIGhlaWdodDogMjBweDsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjY2VjZWNlOwogIGJvcmRlcjogMXB4IHNvbGlkICM5YTlhOWE7CiAgbWFyZ2luOiAxMHB4IDE4cHg7CiAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTsKICAtbW96LXVzZXItc2VsZWN0OiBub25lOwogIC1tcy11c2VyLXNlbGVjdDogbm9uZTsKICB1c2VyLXNlbGVjdDogbm9uZTsKfQouc2xpZGVyIHsKICBjdXJzb3I6IC13ZWJraXQtZ3JhYjsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgaGVpZ2h0OiAxMDAlOwogIGJhY2tncm91bmQtY29sb3I6ICMwMDAwMDA4MDsKfQouc2xpZGVyLS1ncmFiYmluZyB7CiAgY3Vyc29yOiAtd2Via2l0LWdyYWJiaW5nOwp9Ci56b29tLWNoYXIgewogIC8qIGJhY2tncm91bmQtaW1hZ2U6IHVybCgnLi4vYXNzZXRzL3Z1ZS1kb3VibGUtcmFuZ2UvbmV4dC5zdmcnKTsgKi8KICBjdXJzb3I6IGV3LXJlc2l6ZTsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgd2lkdGg6IDM1cHg7CiAgaGVpZ2h0OiAzNXB4OwogIHRvcDogLThweDsKfQouem9vbS1jaGFyLS1sZWZ0IHsKICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJy4uL2Fzc2V0cy92dWUtZG91YmxlLXJhbmdlL2xlZnQuc3ZnJyk7CiAgbGVmdDogLTE4cHg7Cn0KLnpvb20tY2hhci0tcmlnaHQgewogIC8qIGJhY2tncm91bmQtaW1hZ2U6IHVybCgnLi4vYXNzZXRzL3Z1ZS1kb3VibGUtcmFuZ2UvbGVmdC5zdmcnKTsgKi8KICByaWdodDogLTE4cHg7Cn0K"},{"version":3,"sources":["VueDoubleRange.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"VueDoubleRange.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"container\" ref=\"container\">\n    <div class=\"slider\" name=\"slider\"\n         ref=\"slider\"\n         :style=\"{ left: inner.left + 'px', width: inner.width + 'px' }\"\n         @mousedown=\"onMouseDown\">\n      <div class=\"zoom-char zoom-char--left\" name=\"left\"\n           ref=\"left\"\n           @mousedown=\"onMouseDown\"></div>\n      <div class=\"zoom-char zoom-char--right\" name=\"right\"\n           ref=\"right\"\n           @mousedown=\"onMouseDown\"></div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'VueDoubleRange',\n  props: {\n    value: Object,\n    min: Number,\n    max: Number,\n    step: Number\n  },\n  data () {\n    return {\n      isMouseDown: false,\n      movedItem: null,\n      tmpValue: {\n        from: 0,\n        halfFrom: 0,\n        to: 0,\n        halfTo: 0\n      },\n      width: {\n        container: 0,\n        step: 0,\n        halfStep: 0\n      },\n      mouse: {\n        startX: 0\n      }\n    }\n  },\n  mounted () {\n    // check available slider bounded\n    if (this.step <= 0) {\n      this.step = 1;\n    }\n    let value = this.value;\n    if (value.from < this.min) {\n      this.$emit('input', { from: this.min, to: value.to });\n    }\n    if (value.to > this.max) {\n      this.$emit('input', { from: value.from, to: this.max });\n    }\n    if (value.from > value.to) {\n      this.$emit('input', { from: this.min, to: this.max });\n    }\n    // add events\n    window.addEventListener('resize', this.onWindowResize);\n    document.addEventListener('mouseup', this.onMouseUp);\n    document.addEventListener('mousemove', this.onMouseMove);\n    // init width data\n    this.onWindowResize();\n  },\n  beforeDestroy () {\n    // remove added events\n    window.removeEventListener('resize', this.onWindowResize);\n    document.removeEventListener('mouseup', this.onMouseUp);\n    document.removeEventListener('mousemove', this.onMouseMove);\n  },\n  computed: {\n    inner () {\n      let { from, to } = this.getValue();\n      let left = this.width.step * ((from - this.min) / this.step);\n      let width = (this.width.step * ((to - this.min) / this.step)) - left;\n      return {\n        left,\n        width\n      };\n    }\n  },\n  methods: {\n    getValue () {\n      return {\n        from: (Number(this.value.from) + this.tmpValue.from + this.tmpValue.halfFrom) || this.min,\n        to: (Number(this.value.to) + this.tmpValue.to + this.tmpValue.halfTo) || this.max\n      }\n    },\n    onWindowResize () {\n      this.width.container = this.$refs.container.offsetWidth;\n      this.width.step = (this.width.container / (this.max - this.min)) * this.step;\n      this.width.halfStep = this.width.step / 2;\n    },\n    onMouseDown (event) {\n      // check is previously mouse not pressed down\n      if (this.isMouseDown) return;\n      // get info from new mouse down event\n      this.movedItem = event.target.getAttribute('name');\n      this.mouse.startX = event.clientX;\n      switch (this.movedItem) {\n        case 'slider':\n          this.$refs.slider.classList.add('slider--grabbing');\n          break;\n        case 'left':\n          this.$refs.right.style.zIndex = 1;\n          this.$refs.left.style.zIndex = 2;\n          break;\n        case 'right':\n          this.$refs.left.style.zIndex = 1;\n          this.$refs.right.style.zIndex = 2;\n          break;\n      }\n      this.isMouseDown = true;\n    },\n    onMouseMove (event) {\n      // check is previously mouse pressed down\n      if (this.isMouseDown) {\n        let clientX = event.clientX;\n        let delta = this.mouse.startX - clientX;\n        // get new value parts from delta\n        let parts, halfPart;\n        if (delta > 0) {\n          parts = Math.floor(delta / this.width.step);\n          halfPart = Math.floor((delta - (parts * this.width.step)) / this.width.halfStep);\n          parts = -(parts * this.step);\n          halfPart = -(halfPart * this.step);\n        } else {\n          delta = -delta;\n          parts = Math.floor(delta / this.width.step);\n          halfPart = Math.floor((delta - (parts * this.width.step)) / this.width.halfStep);\n          parts = parts * this.step;\n          halfPart = halfPart * this.step;\n        }\n        let valueFrom = Number(this.value.from);\n        let valueTo = Number(this.value.to);\n        switch (this.movedItem) {\n          case 'left': {\n            // check bounds\n            let tmpValueFrom = valueFrom + parts + halfPart;\n            if (tmpValueFrom < this.min) {\n              parts = this.min - valueFrom;\n              halfPart = 0;\n            } else if (tmpValueFrom > valueTo) {\n              parts = valueTo - valueFrom;\n              halfPart = 0;\n            }\n            // set new values\n            this.tmpValue.from = parts;\n            this.tmpValue.halfFrom = halfPart;\n            break;\n          }\n          case 'right': {\n            // check bounds\n            let tmpValueTo = valueTo + parts + halfPart;\n            if (tmpValueTo > this.max) {\n              parts = this.max - valueTo;\n              halfPart = 0;\n            } else if (tmpValueTo < valueFrom) {\n              parts = valueFrom - valueTo;\n              halfPart = 0;\n            }\n            // set new values\n            this.tmpValue.to = parts;\n            this.tmpValue.halfTo = halfPart;\n            break;\n          }\n          case 'slider': {\n            // check bounds\n            let tmpValueFrom = valueFrom + parts + halfPart;\n            let tmpValueTo = valueTo + parts + halfPart;\n            if (tmpValueFrom < this.min) {\n              parts = this.min - valueFrom;\n              halfPart = 0;\n            } else if (tmpValueTo > this.max) {\n              parts = this.max - valueTo;\n              halfPart = 0;\n            }\n            // set new values\n            this.tmpValue.from = parts;\n            this.tmpValue.to = parts;\n            this.tmpValue.halfFrom = halfPart;\n            this.tmpValue.halfTo = halfPart;\n          }\n        }\n        // emit event that moved value update\n        this.$emit('update', this.getValue());\n      }\n    },\n    onMouseUp () {\n      // check is previously mouse pressed down\n      if (!this.isMouseDown) return;\n      // final handling data\n      this.updateValue();\n      if (this.movedItem === 'slider') {\n        this.$refs.slider.classList.remove('slider--grabbing');\n      }\n      this.resetData();\n    },\n    updateValue () {\n      // recalculate new value\n      let prevValueFrom = Number(this.value.from);\n      let prevValueTo = Number(this.value.to);\n      this.value.from = prevValueFrom + this.tmpValue.from + this.tmpValue.halfFrom;\n      this.value.to = prevValueTo + this.tmpValue.to + this.tmpValue.halfTo;\n      if (prevValueFrom !== this.value.from || prevValueTo !== this.value.to) {\n        // emit event to update v-model\n        this.$emit('input', this.value);\n      }\n    },\n    resetData () {\n      this.tmpValue.from = 0;\n      this.tmpValue.halfFrom = 0;\n      this.tmpValue.to = 0;\n      this.tmpValue.halfTo = 0;\n      this.movedItem = null;\n      this.isMouseDown = false;\n    }\n  }\n}\n</script>\n\n<style scoped>\n  .container {\n    position: relative;\n    height: 20px;\n    background-color: #cecece;\n    border: 1px solid #9a9a9a;\n    margin: 10px 18px;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n  }\n  .slider {\n    cursor: -webkit-grab;\n    position: absolute;\n    height: 100%;\n    background-color: #00000080;\n  }\n  .slider--grabbing {\n    cursor: -webkit-grabbing;\n  }\n  .zoom-char {\n    /* background-image: url('../assets/vue-double-range/next.svg'); */\n    cursor: ew-resize;\n    position: absolute;\n    width: 35px;\n    height: 35px;\n    top: -8px;\n  }\n  .zoom-char--left {\n    background-image: url('../assets/vue-double-range/left.svg');\n    left: -18px;\n  }\n  .zoom-char--right {\n    /* background-image: url('../assets/vue-double-range/left.svg'); */\n    right: -18px;\n  }\n</style>"]}]}
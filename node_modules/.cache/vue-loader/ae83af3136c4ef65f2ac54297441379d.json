{"remainingRequest":"/app/node_modules/vue-loader/lib/index.js??vue-loader-options!/app/src/components/v-question-item.vue?vue&type=style&index=1&lang=css&","dependencies":[{"path":"/app/src/components/v-question-item.vue","mtime":1610880264197},{"path":"/app/node_modules/css-loader/dist/cjs.js","mtime":1610126726916},{"path":"/app/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1610126728456},{"path":"/app/node_modules/postcss-loader/src/index.js","mtime":1610126727680},{"path":"/app/node_modules/cache-loader/dist/cjs.js","mtime":1610126726712},{"path":"/app/node_modules/vue-loader/lib/index.js","mtime":1610126728456}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKeW91ciBzdHlsZXMK"},{"version":3,"sources":["v-question-item.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6FA","file":"v-question-item.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div class= 'v-question-item'>\n      <!-- <p class=\"v-catalog-item__text\">{{question_data.id}}.{{question_data.text}} </p> -->\n      <div v-if=\"question_data.type === 'selected' \">\n        <p class=\"v-catalog-item__text\">{{question_data.id}}.{{question_data.text}} </p>\n          <select v-model=\"selectedAnswers\">\n            <option v-for=\"answer in question_data.answers\" \n                    v-bind:key=\"answer.id\"\n                    v-bind:value=\"answer.value\"\n                    >{{answer.value}}</option>\n          </select>\n          <span>Answer: {{selectedAnswers}}</span>\n      </div>\n      <div v-if=\"question_data.type === 'checkbox' \" >\n        <p class=\"v-catalog-item__text\">{{question_data.id}}.{{question_data.text}} </p>\n        <radio-set label-name=\"checkbox\" v-model=\"selectedAnswers\" :options=\"question_data.answers\"></radio-set>\n        <span>Answer: {{ selectedAnswers }}</span>\n      </div>\n      <div v-if=\"question_data.type === 'message' \" >\n        <p class=\"v-catalog-item__text\">{{question_data.id}}.{{question_data.text}} </p>\n        <input v-model=\"selectedAnswers\" placeholder=\"write you useless opinion \">\n        <p>Answer: {{ selectedAnswers }}</p>\n      </div>\n      <div v-if=\"question_data.type === 'range' \">\n        <p class=\"v-catalog-item__text\">{{question_data.id}}.{{question_data.text}} </p>\n      <!-- <vue-range-slider ref=\"slider\" v-model=\"value\"></vue-range-slider> -->\n      <vue-slider :min=\"question_data.answers[0]\"\n          :max=\"question_data.answers[1]\"\n          :interval=\"10\"\n          v-model=\"value\"\n          :marks=\"marks\"\n          :tooltip=\"'none'\"\n          :process-style=\"{ backgroundColor: 'blue' }\"\n      :tooltip-style=\"{ backgroundColor: 'blue', borderColor: 'blue' }\"\n    >\n      <div :class=\"['custom-dot', { focus }]\"></div>\n      <template v-slot:step=\"{ label, active }\">\n        <div :class=\"['custom-step', { active }]\"></div>\n      </template>\n      <template v-slot:process=\"{ start, end, style, index }\">\n          <div class=\"vue-slider-process\" :style=\"style\">\n            <div :class=\"[\n              'merge-tooltip',\n              'vue-slider-dot-tooltip-inner',\n              'vue-slider-dot-tooltip-inner-top',\n            ]\">\n              {{ value[index] }} - {{ value[index + 1] }}\n            </div>\n          </div>\n      </template>\n      </vue-slider>\n      <br>\n      <div class=\"set-range\">\n      <label></label>\n    <input type=\"text\" v-model=\"value[0]\" placeholder=\"От\" class=\"form-control\" /><br>\n    <label></label>\n    <input type=\"text\" v-model=\"value[1]\"  placeholder=\"До\" class=\"form-control\" /><br>\n    \n      </div>\n      </div>\n      <div v-if=\"question_data.type === 'fill-checkbox' \" >\n        <p-check class=\"p-icon p-round p-smooth\" color=\"success\">\n        <i slot=\"extra\" class=\"icon mdi mdi-check\"></i>\n        Tuesday\n    </p-check>\n      </div>\n      <multiselect v-model=\"value\" :options=\"options\"></multiselect>\n  </div>\n</template>\n\n<script>\n  import Multiselect from 'vue-multiselect'\n\n  // register globally\n  Vue.component('multiselect', Multiselect)\n\n  export default {\n    // OR register locally\n    components: { Multiselect },\n    data () {\n      return {\n        value: null,\n        options: ['list', 'of', 'options']\n      }\n    }\n  }\n</script>\n\n<!-- New step!\n     Add Multiselect CSS. Can be added as a static asset or inside a component. -->\n<style src=\"vue-multiselect/dist/vue-multiselect.min.css\"></style>\n\n<style>\n  your styles\n</style>\n\nvia CDN\nJs\n\n// register globally\nVue.component('vue-multiselect', window.VueMultiselect.default)\n\nExamples\nSingle select\n\nThe basic single select / dropdown doesn’t require much configuration.\n\nThe options prop must be an Array.\nOptional configuration flags:\n\n    :searchable=\"false\" – disables the search functionality\n    :close-on-select=\"false\" – the dropdown stays open after selecting an option\n    :show-labels=\"false\" – the highlighted option doesn’t have a label on it\n\nSingle select\noptions\n\noptions\n\nCode sample\nJavaScript\n\nimport Multiselect from 'vue-multiselect'\n\nexport default {\n  components: {\n    Multiselect\n  },\n  data () {\n    return {\n      value: '',\n      options: ['Select option', 'options', 'selected', 'mulitple', 'label', 'searchable', 'clearOnSelect', 'hideSelected', 'maxHeight', 'allowEmpty', 'showLabels', 'onChange', 'touched']\n    }\n  }\n}\n\npug\nhtml\nHtml\n\n<div>\n  <label class=\"typo__label\">Single select</label>\n  <multiselect v-model=\"value\" :options=\"options\" :searchable=\"false\" :close-on-select=\"false\" :show-labels=\"false\" placeholder=\"Pick a value\"></multiselect>\n  <pre class=\"language-json\"><code>{{ value  }}</code></pre>\n</div>\n\nSingle select (object)\n\nWhen working with objects, you must provide additional props: label and track-by.\n\ntrack-by is used to identify the option within the options list thus it’s value has to be unique. In this example the name property is unique across all options, so it can be used as track-by value.\n\nlabel is used to display the option.\nOptional configuration flags:\n\n    :searchable=\"false\" – disables the search functionality\n    :allow-empty=\"false\" – once there is a value it can’t be deselected\n    deselect-label=\"Can't remove this value\" – when highlighted, the already selected option will have the Can't remove this value helper label. Useful for single selects that don’t allow empty selection.\n\nSingle select / dropdown\nVue.js is written in JavaScript\n\n{\n  \"name\": \"Vue.js\",\n  \"language\": \"JavaScript\"\n}\n\nCode sample\nJavaScript\n\nimport Multiselect from 'vue-multiselect'\n\nexport default {\n  components: {\n    Multiselect\n  },\n  data () {\n    return {\n      value: null,\n      options: [\n        { name: 'Vue.js', language: 'JavaScript' },\n        { name: 'Rails', language: 'Ruby' },\n        { name: 'Sinatra', language: 'Ruby' },\n        { name: 'Laravel', language: 'PHP', $isDisabled: true },\n        { name: 'Phoenix', language: 'Elixir' }\n      ]\n    }\n  }\n}\n\npug\nhtml\nHtml\n\n<div>\n  <label class=\"typo__label\">Single select / dropdown</label>\n  <multiselect v-model=\"value\" deselect-label=\"Can't remove this value\" track-by=\"name\" label=\"name\" placeholder=\"Select one\" :options=\"options\" :searchable=\"false\" :allow-empty=\"false\">\n    <template slot=\"singleLabel\" slot-scope=\"{ option }\"><strong>{{ option.name }}</strong> is written in<strong>  {{ option.language }}</strong></template>\n  </multiselect>\n  <pre class=\"language-json\"><code>{{ value  }}</code></pre>\n</div>\n\nSelect with search\n\nBy default searchable is set to true, thus using search doesn’t require any prop.\n\nThe internal search engine is based on the label prop. In other words – when searching, vue-multiselect only compares the option labels with the current search query. If you want to search inside other object properties look at the ajax search example.\n\ncustom-label accepts a function with the option object as the first param. It should return a string which is then used to display a custom label.\nSelect with search\nVue.js — [JavaScript]\n\n{\n  \"name\": \"Vue.js\",\n  \"language\": \"JavaScript\"\n}\n\nCode sample\nJavaScript\n\nimport Multiselect from 'vue-multiselect'\n\nexport default {\n  components: {\n    Multiselect\n  },\n  data () {\n    return {\n      value: { name: 'Vue.js', language: 'JavaScript' },\n      options: [\n        { name: 'Vue.js', language: 'JavaScript' },\n        { name: 'Rails', language: 'Ruby' },\n        { name: 'Sinatra', language: 'Ruby' },\n        { name: 'Laravel', language: 'PHP' },\n        { name: 'Phoenix', language: 'Elixir' }\n      ]\n    }\n  },\n  methods: {\n    nameWithLang ({ name, language }) {\n      return `${name} — [${language}]`\n    }\n  }\n}\n\npug\nhtml\nHtml\n\n<div>\n  <label class=\"typo__label\">Select with search</label>\n  <multiselect v-model=\"value\" :options=\"options\" :custom-label=\"nameWithLang\" placeholder=\"Select one\" label=\"name\" track-by=\"name\"></multiselect>\n  <pre class=\"language-json\"><code>{{ value  }}</code></pre>\n</div>\n\nMultiple select\n\nTo allow multiple selections pass the :multiple=\"true\" prop.\nOptional configuration flags:\n\n    :close-on-select=\"false\" – the dropdown stays open after selecting an option\n    :clear-on-select=\"false\" – the search query stays the same after selecting an option\n\nNew in v2.0.0 stable:\n\n    You can now pass <template slot=\"tag\" slot-scope=\"props\"><Your code></template> to use a different markup for selected options (tags)\n\nSimple select / dropdown\n2 options selected\n\n[\n  {\n    \"name\": \"Adonis\",\n    \"language\": \"JavaScript\"\n  },\n  {\n    \"name\": \"Rails\",\n    \"language\": \"Ruby\"\n  }\n]\n\nCode sample\nJavaScript\n\nimport Multiselect from 'vue-multiselect'\n\nexport default {\n  components: {\n    Multiselect\n  },\n  data () {\n    return {\n      value: [],\n      options: [\n        { name: 'Vue.js', language: 'JavaScript' },\n        { name: 'Adonis', language: 'JavaScript' },\n        { name: 'Rails', language: 'Ruby' },\n        { name: 'Sinatra', language: 'Ruby' },\n        { name: 'Laravel', language: 'PHP' },\n        { name: 'Phoenix', language: 'Elixir' }\n      ]\n    }\n  }\n}\n\npug\nhtml\nHtml\n\n<div>\n  <label class=\"typo__label\">Simple select / dropdown</label>\n  <multiselect v-model=\"value\" :options=\"options\" :multiple=\"true\" :close-on-select=\"false\" :clear-on-select=\"false\" :preserve-search=\"true\" placeholder=\"Pick some\" label=\"name\" track-by=\"name\" :preselect-first=\"true\">\n    <template slot=\"selection\" slot-scope=\"{ values, search, isOpen }\"><span class=\"multiselect__single\" v-if=\"values.length &amp;&amp; !isOpen\">{{ values.length }} options selected</span></template>\n  </multiselect>\n  <pre class=\"language-json\"><code>{{ value  }}</code></pre>\n</div>\n\nAsynchronous select\n\nVue-Multiselect supports changing the option list on the fly, thus can be also used a type-a-head search box.\n\nTo react to the search query changes, set a handler function on the @search-change event. It receives the searchQuery as the first param, which can be used to make an asynchronous API call.\n\nIt is convenient to set the :loading prop to true, whenever a request is in progress. Look at the provided asyncFind method for an example usage.\nOptional configuration flags:\n\n    :hide-selected=\"true\" – already selected options will not be displayed in the dropdown\n    :internal-search=\"false\" – disables the multiselect’s internal search engine. If you do that, you have to manually update the available :options.\n    :limit=\"3\" – limits the visible results to 3.\n    :limit-text=\"limitText\" – function that receives the current selected options count and should return a string to show when the :limit count is exceed\n    :options-limit=\"300\" – limits the displayed options to 300. Useful for optimisations purposes.\n\nNew in v2.0.0 stable:\n\n    id=\"ajax\" – every event is emitted with this as the second param. Useful for identification which component instance triggered the method (in loops for example). NEW: Can also be used for pointing with <label :for=\"id\">.\n    open-direction=\"bottom\" – forces the multiselect to always open below. Use top or above to always open above. By default the multiselect will open whereever there is more space once there is not enough space below to open at maxHeight.\n\nAsync multiselect\nType to search\n\n[]\n\nCode sample\nJavaScript\n\nimport Multiselect from 'vue-multiselect'\nimport { ajaxFindCountry } from './countriesApi'\n\nexport default {\n  components: {\n    Multiselect\n  },\n  data () {\n    return {\n      selectedCountries: [],\n      countries: [],\n      isLoading: false\n    }\n  },\n  methods: {\n    limitText (count) {\n      return `and ${count} other countries`\n    },\n    asyncFind (query) {\n      this.isLoading = true\n      ajaxFindCountry(query).then(response => {\n        this.countries = response\n        this.isLoading = false\n      })\n    },\n    clearAll () {\n      this.selectedCountries = []\n    }\n  }\n}\n\npug\nhtml\nHtml\n\n<div>\n  <label class=\"typo__label\" for=\"ajax\">Async multiselect</label>\n  <multiselect v-model=\"selectedCountries\" id=\"ajax\" label=\"name\" track-by=\"code\" placeholder=\"Type to search\" open-direction=\"bottom\" :options=\"countries\" :multiple=\"true\" :searchable=\"true\" :loading=\"isLoading\" :internal-search=\"false\" :clear-on-select=\"false\" :close-on-select=\"false\" :options-limit=\"300\" :limit=\"3\" :limit-text=\"limitText\" :max-height=\"600\" :show-no-results=\"false\" :hide-selected=\"true\" @search-change=\"asyncFind\">\n    <template slot=\"tag\" slot-scope=\"{ option, remove }\"><span class=\"custom__tag\"><span>{{ option.name }}</span><span class=\"custom__remove\" @click=\"remove(option)\">❌</span></span></template>\n    <template slot=\"clear\" slot-scope=\"props\">\n      <div class=\"multiselect__clear\" v-if=\"selectedCountries.length\" @mousedown.prevent.stop=\"clearAll(props.search)\"></div>\n    </template><span slot=\"noResult\">Oops! No elements found. Consider changing the search query.</span>\n  </multiselect>\n  <pre class=\"language-json\"><code>{{ selectedCountries  }}</code></pre>\n</div>\n\nTagging\n\nTo add tagging functionality to single/multiple selects, set the :taggable prop to true. This will add an additional option at the beginning of the options list whenever you type a phrase that doesn’t have an exact match in the available options. Selecting this temporary option will emit the @tag event with the current typed search query as the first param. The event handler should add the received tag to both the options list and the value.\n\nRemember that when working with objects as options, you have to transform the received tag string to an object that matches the objects structure of the options list. In this example, the addTag method generates an object with a unique code property.\nOptional configuration flags:\n\n    tag-placeholder=\"Add this as new tag\" – A helper label that will be displayed when highlighting the just typed tag suggestion.\n    tag-position=\"bottom\" – By default the tag position will be set to 'top' and new tags will appear above the search results. Changing the tag positon to 'bottom' will revert this behaviour and will prioritize the search results.\n\nTagging\nVue.js\nJavascript\n\n[\n  {\n    \"name\": \"Vue.js\",\n    \"code\": \"vu\"\n  },\n  {\n    \"name\": \"Javascript\",\n    \"code\": \"js\"\n  }\n]\n\nCode sample\nJavaScript\n\nimport Multiselect from 'vue-multiselect'\n\nexport default {\n  components: {\n    Multiselect\n  },\n  data () {\n    return {\n      value: [\n        { name: 'Javascript', code: 'js' }\n      ],\n      options: [\n        { name: 'Vue.js', code: 'vu' },\n        { name: 'Javascript', code: 'js' },\n        { name: 'Open Source', code: 'os' }\n      ]\n    }\n  },\n  methods: {\n    addTag (newTag) {\n      const tag = {\n        name: newTag,\n        code: newTag.substring(0, 2) + Math.floor((Math.random() * 10000000))\n      }\n      this.options.push(tag)\n      this.value.push(tag)\n    }\n  }\n}\n\npug\nhtml\nHtml\n\n<div>\n  <label class=\"typo__label\">Tagging</label>\n  <multiselect v-model=\"value\" tag-placeholder=\"Add this as new tag\" placeholder=\"Search or add a tag\" label=\"name\" track-by=\"code\" :options=\"options\" :multiple=\"true\" :taggable=\"true\" @tag=\"addTag\"></multiselect>\n  <pre class=\"language-json\"><code>{{ value  }}</code></pre>\n</div>\n\nCustom option template\n\nYou can use option scoped slot to provide a custom option template. The available props include props.option and props.search. Look at the provided example for more details.\n\nTo ensure the keyboard navigation works properly, remember to set the :option-height so it equals the height of the option template. By default, the component assumes an option height of 40px.\nOptional configuration flags:\n\n    :option-height=\"104\" – The height of the custom option template.\n\nCustom option template\nNo Man’s SkySpace Pirate\n\n{\n  \"title\": \"Space Pirate\",\n  \"desc\": \"More space battles!\",\n  \"img\": \"static/posters/fleet.png\"\n}\n\nCode sample\nJavaScript\n\nimport Multiselect from 'vue-multiselect'\n\nexport default {\n  components: {\n    Multiselect\n  },\n  data () {\n    return {\n      value: { title: 'Explorer', desc: 'Discovering new species!', img: 'static/posters/creatures.png' },\n      options: [\n        { title: 'Space Pirate', desc: 'More space battles!', img: 'static/posters/fleet.png' },\n        { title: 'Merchant', desc: 'PROFIT!', img: 'static/posters/trading_post.png' },\n        { title: 'Explorer', desc: 'Discovering new species!', img: 'static/posters/creatures.png' },\n        { title: 'Miner', desc: 'We need to go deeper!', img: 'static/posters/resource_lab.png' }\n      ]\n    }\n  },\n  methods: {\n    customLabel ({ title, desc }) {\n      return `${title} – ${desc}`\n    }\n  }\n}\n\npug\nhtml\nHtml\n\n<div>\n  <label class=\"typo__label\">Custom option template</label>\n  <multiselect v-model=\"value\" placeholder=\"Fav No Man’s Sky path\" label=\"title\" track-by=\"title\" :options=\"options\" :option-height=\"104\" :custom-label=\"customLabel\" :show-labels=\"false\">\n    <template slot=\"singleLabel\" slot-scope=\"props\"><img class=\"option__image\" :src=\"props.option.img\" alt=\"No Man’s Sky\"><span class=\"option__desc\"><span class=\"option__title\">{{ props.option.title }}</span></span></template>\n    <template slot=\"option\" slot-scope=\"props\"><img class=\"option__image\" :src=\"props.option.img\" alt=\"No Man’s Sky\">\n      <div class=\"option__desc\"><span class=\"option__title\">{{ props.option.title }}</span><span class=\"option__small\">{{ props.option.desc }}</span></div>\n    </template>\n  </multiselect>\n  <pre class=\"language-json\"><code>{{ value  }}</code></pre>\n</div>\n\nOption groups\n\nThe options list can also contain groups. It requires passing 3 additional props: group-label, group-values and group-select. group-label is used to locate the group label. group-values should point to the group’s option list. group-select is used to define if selecting the group label should select/unselect all values in the group, or do nothing.\n\nDespite that the available options are grouped, the selected options are stored as a flat array of objects.\n\nPlease look at the provided example for a example options list structure.\nGroups\nAdonis\nRails\n\n[\n  {\n    \"name\": \"Adonis\",\n    \"category\": \"Backend\"\n  },\n  {\n    \"name\": \"Rails\",\n    \"category\": \"Backend\"\n  }\n]\n\nCode sample\nJavaScript\n\nimport Multiselect from 'vue-multiselect'\n\nexport default {\n  components: {\n    Multiselect\n  },\n  data () {\n    return {\n      options: [\n        {\n          language: 'Javascript',\n          libs: [\n            { name: 'Vue.js', category: 'Front-end' },\n            { name: 'Adonis', category: 'Backend' }\n          ]\n        },\n        {\n          language: 'Ruby',\n          libs: [\n            { name: 'Rails', category: 'Backend' },\n            { name: 'Sinatra', category: 'Backend' }\n          ]\n        },\n        {\n          language: 'Other',\n          libs: [\n            { name: 'Laravel', category: 'Backend' },\n            { name: 'Phoenix', category: 'Backend' }\n          ]\n        }\n      ],\n      value: []\n    }\n  }\n}\n\npug\nhtml\nHtml\n\n<div>\n  <label class=\"typo__label\">Groups</label>\n  <multiselect v-model=\"value\" :options=\"options\" :multiple=\"true\" group-values=\"libs\" group-label=\"language\" :group-select=\"true\" placeholder=\"Type to search\" track-by=\"name\" label=\"name\"><span slot=\"noResult\">Oops! No elements found. Consider changing the search query.</span></multiselect>\n  <pre class=\"language-json\"><code>{{ value  }}</code></pre>\n</div>\n\nVuex support\n\nDue to the one-way data-flow enforced by Vuex you should not be using v-model for manipulating the currently selected value. Because Vue-Multiselect always uses it’s own internal copy of the value it never mutates the :value by itself, which means it can can safely used with Vuex or even Redux.\n\nIn Vue 2.0 v-model is just a syntax sugar for :value and @input. Because of this we can use the @input event to trigger Vuex actions or mutations. Whenever we mutate the :value in Vuex, Multiselect’s internal value will update.\nVuex example.\nVuex\nCode sample\nJavaScript\n\nimport Vue from 'vue'\nimport Vuex from 'vuex'\nimport Multiselect from 'vue-multiselect'\n\nconst { mapActions, mapState } = Vuex\n\nVue.use(Vuex)\n\nconst store = new Vuex.Store({\n  state: {\n    value: 'Vuex',\n    options: ['Vuex', 'Vue', 'Vuelidate', 'Vue-Multiselect', 'Vue-Router']\n  },\n  mutations: {\n    updateValue (state, value) {\n      state.value = value\n    }\n  },\n  actions: {\n    updateValueAction ({ commit }, value) {\n      commit('updateValue', value)\n    }\n  }\n})\n\nexport default {\n  store,\n  components: {\n    Multiselect\n  },\n  computed: {\n    ...mapState(['value', 'options'])\n  },\n  methods: {\n    ...mapActions(['updateValueAction'])\n  }\n}\n\npug\nhtml\nHtml\n\n<div>\n  <label class=\"typo__label\">Vuex example.</label>\n  <multiselect placeholder=\"Pick action\" :value=\"value\" :options=\"options\" :searchable=\"false\" @input=\"updateValueAction\"></multiselect>\n</div>\n\nAction dispatcher\n\nThe component may also act as dispatcher for different actions/methods. In this case there is no need for the :value prop. Instead of @input you can listen on the @select event. The difference between the two is that @select only receives the currently selected value instead of the whole list of selected values (if select is multiple).\nOptional configuration flags:\n\n    :reset-after=\"true\" – Resets the internal value after each select action inside the component.\n\nOpen console to see logs.\nPick action\nCode sample\nJavaScript\n\nimport Multiselect from 'vue-multiselect'\n\nexport default {\n  components: {\n    Multiselect\n  },\n  data () {\n    return {\n      actions: ['alert', 'console.log', 'scrollTop']\n    }\n  },\n  methods: {\n    dispatchAction (actionName) {\n      switch (actionName) {\n        case 'alert':\n          window.alert('You just dispatched \"alert\" action!')\n          break\n        case 'console.log':\n          console.log('You just dispatched \"console.log\" action!')\n          break\n        case 'scrollTop':\n          window.scrollTo(0, 0)\n          break\n      }\n    }\n  }\n}\n\npug\nhtml\nHtml\n\n<div>\n  <label class=\"typo__label\">Open console to see logs.</label>\n  <multiselect placeholder=\"Pick action\" :options=\"actions\" :searchable=\"false\" :reset-after=\"true\" @select=\"dispatchAction\"></multiselect>\n</div>\n\nCustom configuration\n\nShows error when touched, but nothing is selected.\nOptional configuration flags:\n\n    :max-height=\"150\" – Set the dropdown height to 150px\n    :max=\"3\" – Set the maximal number of selections\n    :allow-empty=\"false\" – Doesn’t allow to remove the last option if it exists\n    :block-keys=\"['Tab', 'Enter']\" – Block the Tab and Enter keys from triggering their default behaviour\n    @close=\"onTouch\" – Event emitted when closing the dropdown\n\nCustomized multiselect\nPick at least one\nCode sample\nJavaScript\n\nimport Multiselect from 'vue-multiselect'\n\nexport default {\n  components: {\n    Multiselect\n  },\n  data () {\n    return {\n      isDisabled: false,\n      isTouched: false,\n      value: [],\n      options: ['Select option', 'Disable me!', 'Reset me!', 'mulitple', 'label', 'searchable']\n    }\n  },\n  computed: {\n    isInvalid () {\n      return this.isTouched && this.value.length === 0\n    }\n  },\n  methods: {\n    onChange (value) {\n      this.value = value\n      if (value.indexOf('Reset me!') !== -1) this.value = []\n    },\n    onSelect (option) {\n      if (option === 'Disable me!') this.isDisabled = true\n    },\n    onTouch () {\n      this.isTouched = true\n    }\n  }\n}\n\npug\nhtml\nHtml\n\n<div :class=\"{ 'invalid': isInvalid }\">\n  <label class=\"typo__label\">Customized multiselect</label>\n  <multiselect placeholder=\"Pick at least one\" select-label=\"Enter doesn’t work here!\" :value=\"value\" :options=\"options\" :multiple=\"true\" :searchable=\"true\" :allow-empty=\"false\" :hide-selected=\"true\" :max-height=\"150\" :max=\"3\" :disabled=\"isDisabled\" :block-keys=\"['Tab', 'Enter']\" @input=\"onChange\" @close=\"onTouch\" @select=\"onSelect\"></multiselect>\n  <label class=\"typo__label form__label\" v-show=\"isInvalid\">Must have at least one value</label>\n</div>\n\nProps\nName\tType\tDefault\tDescription\nmultiselectMixin.js\nid\tInteger||String\t\tUsed to identify the component in events.\noptions\tArray\t\tArray of available options: Objects, Strings or Integers. If array of objects, visible label will default to option.label.\nvalue\tObject||Array||String||Integer\t\tPresets the selected options.\nmultiple\tBoolean\tfalse\tEquivalent to the multiple attribute on a <select> input.\ntrackBy\tString\t\tUsed to compare objects. Only use if options are objects.\nlabel\tString\t\tLabel from option Object, that will be visible in the dropdown.\nsearchable\tBoolean\ttrue\tAdd / removes search input.\nclearOnSelect\tBoolean\ttrue\tClear the search input after select(). Use only when multiple is true.\nhideSelected\tBoolean\tfalse\tHide already selected options\nplaceholder\tString\t'Select option'\tEquivalent to the placeholder attribute on a <select> input.\nallowEmpty\tBoolean\ttrue\tAllows to remove all selected values. Otherwise one must be left selected.\nresetAfter\tBoolean\tfalse\tReset this.value, this.search, this.selected after this.value changes.\ncloseOnSelect\tBoolean\ttrue\tEnable/disable closing after selecting an option\ncustomLabel\tFunction => String\t\tFunction used to create a custom label\ntaggable\tBoolean\tfalse\tDisable / Enable tagging\ntagPlaceholder\tString\t'Press enter to create a tag'\tString to show when highlighting a potential tag\ntagPosition\tString\t'top'\tBy default new tags will appear above the search results. Changing to 'bottom' will revert this behaviour and will proritize the search results\nmax\tNumber\t\tNumber of allowed selected options.\noptionsLimit\tNumber\t1000\tLimits the options displayed in the dropdown to the first X options.\ngroupValues\tString\t\tName of the property containing the group values\ngroupLabel\tString\t\tName of the property containing the group label\ngroupSelect\tBoolean\tfalse\tAllow to select all group values by selecting the group label\nblockKeys\tArray\t[]\tArray of keyboard key aliases to block when selecting\ninternalSearch\tBoolean\ttrue\tDecide whether to filter the results internally based on search query. Useful for async filtering, where we search through more complex data.\npreserveSearch\tBoolean\tfalse\tIf set to true, will preserve the search query when opening/closing the component.\npreselectFirst\tBoolean\tfalse\tSelects the first option if initial value is empty\nMultiselect.vue\nname\tString\t''\tName attribute to match optional label element\nselectLabel\tString\t'Press enter to select'\tString to show when pointing to an option\nselectGroupLabel\tString\t'Press enter to select group'\tString to show when pointing to an option\nselectedLabel\tString\t'Selected'\tString to show next to selected option\ndeselectLabel\tString\t'Press enter to remove'\tString to show when pointing to an already selected option\ndeselectGroupLabel\tString\t'Press enter to deselect group'\tString to show when pointing to an already selected option\nshowLabels\tBoolean\ttrue\tDecide whether to show labels on highlighted options\nlimit\tNumber\t99999\tLimit the display of selected options. The rest will be hidden within the limitText string.\nlimitText\tFunction => String\tcount => `and ${count} more`\tFunction that process the message shown when selected elements pass the defined limit.\nloading\tBoolean\tfalse\tShow/hide the loading spinner.\ndisabled\tBoolean\tfalse\tEnable/disable the multiselect.\nmaxHeight\tInteger\t300\tSets max-height style value of the dropdown\nopenDirection\tString\t''\tFixed opening direction (instead of auto). Options are \"above\"/\"top\" or \"below\"/\"bottom\"\nshowNoResults\tBoolean\ttrue\tShow the noResult slot if no results are found.\ntabindex\tNumber\t0\tSpecify the tabindex of the Multiselect component\npointerMixin.js\nshowPointer\tBoolean\ttrue\tEnable/disable highlighting of the pointed value.\noptionHeight\tNumber\t40\tThe height of the option element. Required for proper scrolling.\nEvents\nName\tAttributes\tListen to\tDescription\nInput\t(value, id)\t@input\tEmitted after this.value changes\nSelect\t(selectedOption, id)\t@select\tEmitted after selecting an option\nRemove\t(removedOption, id)\t@remove\tEmitted after removing an option\nSearchChange\t(searchQuery, id)\t@search-change\tEmitted after the search query changes\nTag\t(searchQuery, id)\t@tag\tEmitted after user attemts to add a tag\nOpen\t(id)\t@open\tEmitted when the dropdown opens. Useful for detecting when touched.\nClose\t(value, id)\t@close\tEmitted when the dropdown closes\nSlots\nName\tDescription\noption\tSlot for custom option template. See example.\nDefault: Shows option label\nSlot-scope\n\n    option – option\n    search – current search value\n\nmaxElements\tShows when the maximum options have been selected. Defaults to string:\nDefault: Maximum of <max> options selected. First remove a selected option to select another.\nnoResult\tShows when no elements match the search query. Defaults to string:\nDefault: No elements found. Consider changing the search query.\nnoOptions\tShows when no elements in options empty. Defaults to string:\nDefault: List is empty.\nbeforeList\tShows before the list, when dropdown is open.\nafterList\tShows after the list, when dropdown is open.\ncaret\tElement for opening and closing the dropdown.\nSlot-scope\n\n    toggle: Function – toggles the dropdown.\n\nsingleLabel\tSlot for custom label template for single select\nplaceholder\tSlot for the placeholder (is not displayed when the dropdown is open and `searchable` is true)\nlimit\tSlot to display when the number of selected options is greater than `optionsLimit`.\nclear\tSlot located before the tags\nSlot-scope\n\n    search – the search value\n\ntag\tSlot that is used for all selected options (tags)\nSlot-scope\n\n    option – selected option\n    search – the search value\n    remove – method to remove the slot (pass the option)\n\nCreated by Damian Dulisz @DamianDulisz\n    \n      \n    </div>\n</template>\n\n<script>\nimport RadioSet from \"./v-radio-set.vue\";\nimport VueSlider from 'vue-slider-component'\nimport 'vue-slider-component/theme/default.css'\nimport Multiselect from 'vue-multiselect'\n\nexport default {\n  name: 'v-question-item',\n  components: {\n    RadioSet,\n    VueSlider,\n    Multiselect\n  },\n  props:{\n        question_data:{\n            type:Object,\n            default(){\n                return{}\n            }\n        }\n    },\n  data(){ return {\n    value: '',\n      options: ['Select option', 'options', 'selected', 'mulitple', 'label', 'searchable', 'clearOnSelect', 'hideSelected', 'maxHeight', 'allowEmpty', 'showLabels', 'onChange', 'touched'],\n      // value:[0,50],\n      marks: val => val % 20 === 0,\n      selectedAnswers:\"\"\n  }\n} \n    \n}\n</script>\n<style lang=\"scss\">\n\n.set-range {\n        flex: 0 0 auto;\n\n        display: flex;\n\n        padding: 20px;\n\n        input {\n          width: 100%;\n          padding: (20px / 2) 20px;\n          border: 2px solid rgb(100, 100, 100);\n          border-radius: 100px;\n          transition: border-color .2s ease-out;\n\n          &:hover, &:focus {\n            border-color: rgb(30, 30, 30);\n          }\n        }\n      }\n.merge-tooltip {\n      position: absolute;\n      left: 50%;\n      bottom: 100%;\n      transform: translate(-50%, -15px);\n    }\n.custom-step {\n    width: 100%;\n    height: 100%;\n    border-radius: 50%;\n    box-shadow: 0 0 0 3px #ccc;\n    background-color: #fff;\n  }\n  .custom-step.active {\n    box-shadow: 0 0 0 3px #3498db;\n    background-color: #3498db;\n  }\n .custom-dot {\n    width: 100%;\n    height: 100%;\n    border-radius: 0;\n    //background-color: rgb(49, 4, 194);\n    transition: all .3s;\n  }\n  .custom-dot.focus {\n    border-radius: 25%;\n  }\n</style>"]}]}